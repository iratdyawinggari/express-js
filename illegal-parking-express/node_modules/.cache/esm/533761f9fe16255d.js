let TransactionRepository,ParkingService,TransactionStatusService;_fe1‍.x([["default",()=>TransactionService]]);_fe1‍.w("../repository/transaction.repository",[["default",["TransactionRepository"],function(v){TransactionRepository=v}]]);_fe1‍.w("./slot.service",[["default",["ParkingService"],function(v){ParkingService=v}]]);_fe1‍.w("./transactionStatus.service",[["default",["TransactionStatusService"],function(v){TransactionStatusService=v}]]);



               class TransactionService {
    async getTransactionById(id) {
        return await new TransactionRepository().findOne(id);
    }

    async createTransaction(transaction) {
        transaction.checkInDate=new Date().toTimeString().substring(0,8)

        _fe1‍.g.console.log(transaction)
        transaction.parkingDate=new Date().toISOString().slice(0,10)
        _fe1‍.g.console.log(transaction.parking)
        transaction.parking.capacity--
        _fe1‍.g.console.log(transaction.parking)

        await new ParkingService().updateParking(transaction.parking)

        return await new TransactionRepository().createTransaction(transaction)
    }

    async getAllTransaction() {
        return await new TransactionRepository().findAllTransaction()
    }

    diffInSeconds(dateOut,dateIn) {
        const dOut = dateOut.split(':');
        const dIn = dateIn.split(':');
        const dOutInSecond= dOut[0]*3600 + dOut[1]*60 + (+dOut[2] || 0);
        const dInSecond= dIn[0]*3600 + dIn[1]*60 + (+dIn[2] || 0);
        return dOutInSecond-dInSecond;
    }

    async doneTransaction(transaction){
        const transactionDone = await this.getTransactionById(transaction.id)
        _fe1‍.g.console.log(transactionDone)
        const transactionStatus = await new TransactionStatusService().getTransactionStatusById(2) 

        transactionDone[0].transactionStatus=transactionStatus[0]
        _fe1‍.g.console.log(transactionDone[0].transactionStatus)
        transactionDone[0].parking.capacity++
        transactionDone[0].checkOutDate= new Date().toTimeString().substring(0,8)
        // console.log(transactionStatus)
        _fe1‍.g.console.log(transactionDone[0].checkOutDate)
        const timeDifference = this.diffInSeconds(transactionDone[0].checkOutDate, transactionDone[0].checkInDate);
        _fe1‍.g.console.log(timeDifference)
        const hourDiff=Math.ceil(timeDifference/(3600))
        _fe1‍.g.console.log(hourDiff)
        transactionDone[0].cost=3000
        if(hourDiff>2){
            for (var i = 2; i < hourDiff; i++) {
                transactionDone[0].cost+=15000
            }
        }    
        _fe1‍.g.console.log(transactionDone[0])    
        await new ParkingService().updateParking(transactionDone[0].parking)
        return await new TransactionRepository().transactionDone(transactionDone[0])
    }
}
