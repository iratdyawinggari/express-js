let mysql,createConnection,configure,ProductSchema,CategorySchema,StatusSchema,UserSchema,UserInfoSchema;_af2‍.x([["default",()=>_af2‍.o]]);_af2‍.w("mysql",[["default",["mysql"],function(v){mysql=v}]]);_af2‍.w("typeorm",[["createConnection",["createConnection"],function(v){createConnection=v}]]);_af2‍.w("../config",[["default",["configure"],function(v){configure=v}]]);_af2‍.w("../entities/product.schema",[["default",["ProductSchema"],function(v){ProductSchema=v}]]);_af2‍.w("../entities/category.schema",[["default",["CategorySchema"],function(v){CategorySchema=v}]]);_af2‍.w("../entities/status.schema",[["default",["StatusSchema"],function(v){StatusSchema=v}]]);_af2‍.w("../entities/user.schema",[["default",["UserSchema"],function(v){UserSchema=v}]]);_af2‍.w("../entities/userInfo.schema",[["default",["UserInfoSchema"],function(v){UserInfoSchema=v}]]);










const {dbType,dbHost,dbPort,dbUser,dbPassword,dbName}=configure();

const createDbConnection = async ()=>{
    const connection = await createConnection({
        type: dbType || 'mysql',
        host: dbHost || 'localhost',
        port:dbPort || '3306',
        username: dbUser || 'root',
        password: dbPassword || '',
        database : dbName ||'test',
        entities: [ProductSchema,CategorySchema,StatusSchema,UserSchema,UserInfoSchema] 
    });
    return connection;
}

_af2‍.d(createDbConnection);

